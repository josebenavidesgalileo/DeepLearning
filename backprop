import numpy as np 
#np.random.seed(0)

def relu_diff(x):
  y = np.copy(x)
  y[y>=0] = 1
  y[y<0] = 0
  return y
            

def relu(x):
  y = np.copy(x)
  y[y<0] = 0
  return y
   

def sigmoid (x):
    return 1/(1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

#Input datasets
inputs = np.array([[0,0],[0,1],[1,0],[1,1]])
expected_output = np.array([[0],[1],[1],[0]])

epochs = 1000
lr = 0.1
inputLayerNeurons, hiddenLayerNeurons,hiddenLayerNeurons2, outputLayerNeurons = 2,2,2,1

#Random weights and bias initialization
hidden_weights = np.random.uniform(size=(inputLayerNeurons,hiddenLayerNeurons))
hidden_bias =np.random.uniform(size=(1,hiddenLayerNeurons))

hidden_weights2 = np.random.uniform(size=(hiddenLayerNeurons,hiddenLayerNeurons2))
hidden_bias2 =np.random.uniform(size=(1,hiddenLayerNeurons2))

output_weights = np.random.uniform(size=(hiddenLayerNeurons2,outputLayerNeurons))
output_bias = np.random.uniform(size=(1,outputLayerNeurons))

print("Initial hidden weights: ",end='')
print(*hidden_weights)
print("Initial hidden biases: ",end='')
print(*hidden_bias)

print("Initial hidden weights2: ",end='')
print(*hidden_weights2)
print("Initial hidden biases2: ",end='')
print(*hidden_bias2)



print("Initial output weights: ",end='')
print(*output_weights)
print("Initial output biases: ",end='')
print(*output_bias)


#Training algorithm
for _ in range(epochs):
#Forward Propagation
  
  hidden_layer_activation = np.dot(inputs,hidden_weights)
  hidden_layer_activation += hidden_bias 
  hidden_layer_output = sigmoid(hidden_layer_activation)

  hidden_layer_activation2 = np.dot(hidden_layer_output,hidden_weights2)
  hidden_layer_activation2 += hidden_bias2
  hidden_layer_output2 = sigmoid(hidden_layer_activation2)

  output_layer_activation = np.dot(hidden_layer_output2,output_weights)
  output_layer_activation += output_bias
  predicted_output = sigmoid(output_layer_activation)

 

	#Backpropagation
  error =  (predicted_output - expected_output)
  d_predicted_output = error * sigmoid_derivative(predicted_output)
 
  error_hidden_layer2 = d_predicted_output.dot(output_weights.T)
  d_hidden_layer2 = error_hidden_layer2 * sigmoid_derivative(hidden_layer_output2)
	
  error_hidden_layer = d_hidden_layer2.dot(hidden_weights2.T) 
  d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

  

	#Updating Weights and Biases
  output_weights -= hidden_layer_output2.T.dot(d_predicted_output) * lr
  output_bias -= np.sum(d_predicted_output,axis=0,keepdims=True) * lr

  hidden_weights2 -= hidden_layer_output.T.dot(d_hidden_layer2) * lr
  hidden_bias2 -= np.sum(d_hidden_layer2,axis=0,keepdims=True) * lr

  hidden_weights -= inputs.T.dot(d_hidden_layer) * lr
  hidden_bias -= np.sum(d_hidden_layer,axis=0,keepdims=True) * lr

print("Final hidden weights: ",end='')
print(*hidden_weights)
print("Final hidden bias: ",end='')
print(*hidden_bias)

print("Final hidden weights: ",end='')
print(*hidden_weights2)
print("Final hidden bias: ",end='')
print(*hidden_bias2)

print("Final output weights: ",end='')
print(*output_weights)
print("Final output bias: ",end='')
print(*output_bias)

print("\nOutput from neural network after 10,000 epochs: ",end='')
print(*predicted_output)
print(error)
